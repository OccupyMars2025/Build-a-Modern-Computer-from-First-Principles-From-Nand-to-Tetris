// set SP=261
@261
D=A
@SP
M=D
// call Sys.init
@Sys.init
0;JMP
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
@R13
M=D
(Main.fibonacci$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_14)
@R13
D=M
@Main.fibonacci$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_14_END
D;JLE
@SP
A=M
M=0
@SP
M=M+1
@R13
M=M-1
@Main.fibonacci$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_14
0;JMP
(Main.fibonacci$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_14_END)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
A=M-1
D=M-D
M=-1
@Main.fibonacci$END_LT_ID_57
D;JLT
@SP
A=M-1
M=0
(Main.fibonacci$END_LT_ID_57)
// if-goto N_LT_2
@SP
M=M-1
A=M
D=M
@Main.fibonacci$N_LT_2
D;JNE
// goto N_GE_2
@Main.fibonacci$N_GE_2
0;JMP
// label N_LT_2
(Main.fibonacci$N_LT_2)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
A=M-D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// end of return
// label N_GE_2
(Main.fibonacci$N_GE_2)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci$ret.169
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.169)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci$ret.247
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.247)
// add
@SP
M=M-1
A=M
D=M
@SP
A=M-1
M=M+D
// return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
A=M-D
D=M
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@2
D=A
@R13
A=M-D
D=M
@THIS
M=D
@3
D=A
@R13
A=M-D
D=M
@ARG
M=D
@4
D=A
@R13
A=M-D
D=M
@LCL
M=D
@R14
A=M
0;JMP
// end of return
// function Sys.init 0
(Sys.init)
@0
D=A
@R13
M=D
(Sys.init$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_364)
@R13
D=M
@Sys.init$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_364_END
D;JLE
@SP
A=M
M=0
@SP
M=M+1
@R13
M=M-1
@Sys.init$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_364
0;JMP
(Sys.init$LOOP_TO_INITIALIZE_LOCAL_VARIABLES_WITH_ID_364_END)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Sys.init$ret.388
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.init$ret.388)
// label END
(Sys.init$END)
// goto END
@Sys.init$END
0;JMP
// add an infinite loop to keep the program running
(END)
@END
0;JMP
