// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 

address[14] = 0: 0 ~ (16K - 1)
address[13..14] = 10:  16K ~ (16K + 8K - 1)
address[13..14] = 11, address[0..12] = 0: 16K + 8K

Caution: address[13..14] = 2 means address[13] is 0, address[14] is 1
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux4Way(in=load, sel=address[13..14], 
        a=loadRAM16K001, b=loadRAM16K002, c=loadScreen, d=uselessSignal);
    
    Or(a=loadRAM16K001, b=loadRAM16K002, out=loadRAM16K);

    Or8Way(in=address[0..7], out=w0);
    Or(a=w0, b=address[8], out=w1);
    Or(a=w1, b=address[9], out=w2);
    Or(a=w2, b=address[10], out=w3);
    Or(a=w3, b=address[11], out=w4);
    Or(a=w4, b=address[12], out=w5);
    Not(in=w5, out=w6);
    And(a=address[13], b=w6, out=w7);
    And(a=address[14], b=w7, out=selectKeyboard);

	RAM16K(in=in, load=loadRAM16K, address=address[0..13], out=outRAM16K);

    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);

    Keyboard(out=outKeyboard);
    Mux16(a=false, b=outKeyboard, sel=selectKeyboard, out=outKeyboard002);

    Mux4Way16(a=outRAM16K, b=outRAM16K, c=outScreen, d=outKeyboard002, sel=address[13..14], out=out);
}